buildscript {
    repositories {
        // These repositories are only for Gradle plugins, put any other repositories in the repository block further below
        maven { url = 'https://repo.spongepowered.org/repository/maven-public/' }
        mavenCentral()
    }
    dependencies {
        classpath 'org.spongepowered:mixingradle:0.7-SNAPSHOT'
    }
}

plugins {
    id 'net.minecraftforge.gradle' version '5.1.+'
    id 'org.parchmentmc.librarian.forgegradle' version '1.+'
    id 'net.darkhax.curseforgegradle' version '1.0.11'
    id "com.modrinth.minotaur" version "2.+"
    id 'maven-publish'
    id "io.freefair.lombok" version "6.6-rc1"
}

apply plugin: 'org.spongepowered.mixin'

group = 'com.github.manasmods'
version = "${minecraftVersion}-${modVersion}"
archivesBaseName = modId

java.toolchain.languageVersion = JavaLanguageVersion.of(17)

minecraft {
    mappings channel: 'parchment', version: "${parchmentVersion}-${minecraftVersion}"

    // accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

    runs {
        client {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            // The markers can be added/removed as needed separated by commas.
            // "SCAN": For mods scan.
            // "REGISTRIES": For firing of registry events.
            // "REGISTRYDUMP": For getting the contents of all registries.
            property 'forge.logging.markers', 'REGISTRIES'

            // Recommended logging level for the console
            // You can set various levels here.
            // Please read: https://stackoverflow.com/questions/2031163/when-to-use-the-different-log-levels
            property 'forge.logging.console.level', 'debug'

            property 'forge.enabledGameTestNamespaces', "${modId}"

            property 'mixin.debug.export', 'true'

            mods {
                manascore {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('runServer')

            // Recommended logging data for a userdev environment
            // The markers can be added/removed as needed separated by commas.
            // "SCAN": For mods scan.
            // "REGISTRIES": For firing of registry events.
            // "REGISTRYDUMP": For getting the contents of all registries.
            property 'forge.logging.markers', 'REGISTRIES'

            // Recommended logging level for the console
            // You can set various levels here.
            // Please read: https://stackoverflow.com/questions/2031163/when-to-use-the-different-log-levels
            property 'forge.logging.console.level', 'debug'

            property 'forge.enabledGameTestNamespaces', "${modId}"
            arg "nogui"

            mods {
                manascore {
                    source sourceSets.main
                }
            }
        }

        gameTestServer {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            // The markers can be added/remove as needed separated by commas.
            // "SCAN": For mods scan.
            // "REGISTRIES": For firing of registry events.
            // "REGISTRYDUMP": For getting the contents of all registries.
            property 'forge.logging.markers', 'REGISTRIES'

            // Recommended logging level for the console
            // You can set various levels here.
            // Please read: https://stackoverflow.com/questions/2031163/when-to-use-the-different-log-levels
            property 'forge.logging.console.level', 'debug'

            // Comma-separated list of namespaces to load gametests from. Empty = all namespaces.
            property 'forge.enabledGameTestNamespaces', "${modId}"

            mods {
                manascore {
                    source sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            // The markers can be added/removed as needed separated by commas.
            // "SCAN": For mods scan.
            // "REGISTRIES": For firing of registry events.
            // "REGISTRYDUMP": For getting the contents of all registries.
            property 'forge.logging.markers', 'REGISTRIES'

            // Recommended logging level for the console
            // You can set various levels here.
            // Please read: https://stackoverflow.com/questions/2031163/when-to-use-the-different-log-levels
            property 'forge.logging.console.level', 'debug'

            // Specify the modid for data generation, where to output the resulting resource, and where to look for existing resources.
            args '--mod', "${modId}", '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')

            mods {
                manascore {
                    source sourceSets.main
                }
            }
        }
    }
}

mixin {
    add sourceSets.main, "${modId}.refmap.json"

    config "${modId}.mixins.json"
}

// Include resources generated by data generators.
sourceSets.main.resources { srcDir 'src/generated/resources' }

repositories {
    // If you have mod jar dependencies in ./libs, you can declare them as a repository like so:
    // flatDir {
    //     dir 'libs'
    // }
    maven {
        name = "manasmods"
        credentials {
            username project.findProperty('manasmodsUsername') ?: System.getenv().getOrDefault('MANAS_REPO_USER', '')
            password project.findProperty('manasmodsPassword') ?: System.getenv().getOrDefault('MANAS_REPO_USER_PASSWORD', '')
        }
        url "https://manasmods.bytesafe.dev/maven/manasmods"
    }

    maven {
        url "https://cursemaven.com"
        content {
            includeGroup "curse.maven"
        }
    }

    maven { url 'https://jitpack.io' }
}

dependencies {
    minecraft "net.minecraftforge:forge:${minecraftVersion}-${forgeVersion}"

    minecraftLibrary("com.github.LlamaLad7:MixinExtras:${mixinExtrasVersion}")
    annotationProcessor("com.github.LlamaLad7:MixinExtras:${mixinExtrasVersion}")

    annotationProcessor 'org.spongepowered:mixin:0.8.5:processor'

    runtimeOnly fg.deobf("curse.maven:TargetDummy-225738:4293885") // https://www.curseforge.com/minecraft/mc-mods/mmmmmmmmmmmm/files/4293885
    runtimeOnly fg.deobf("curse.maven:MoonlightLib-499980:4377790") // https://www.curseforge.com/minecraft/mc-mods/selene/files/4377790
}

jarJar.enable()

tasks.jarJar.configure {
    classifier ''
}

reobf {
    jarJar {}
}
tasks.jarJar.finalizedBy('reobfJarJar')

dependencies {
    jarJar "com.github.LlamaLad7:MixinExtras:[${mixinExtrasVersion},)"
}

// Example for how to get properties into the manifest for reading at runtime.
jar {
    classifier 'slim'

    manifest {
        attributes([
                "Specification-Title"     : "manascore",
                "Specification-Vendor"    : "ManasMods",
                "Specification-Version"   : "1", // We are version 1 of ourselves
                "Implementation-Title"    : project.name,
                "Implementation-Version"  : project.jar.archiveVersion,
                "Implementation-Vendor"   : "ManasMods",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}

jar.finalizedBy('reobfJar')

def replaceResources = tasks.register("replaceResources", Copy) {
    it.outputs.upToDateWhen { false }
    //Copy it into the build dir
    it.from(sourceSets.main.resources) {
        def forgeLoaderVersion = forgeVersion.substring(0, forgeVersion.indexOf('.'))
        def nextMinecraftVersion = getNextMajorMinecraftVersion(minecraftVersion)
        def minecraftVersionCheck = "[${minecraftVersion},${nextMinecraftVersion})"

        include "META-INF/mods.toml"
        expand 'modVersion': "${modVersion}",
                'forgeLoaderVersion': "[${forgeLoaderVersion},)",
                'minecraftVersionCheck': "${minecraftVersionCheck}",
                'modId': "${modId}"
    }
    it.into "$buildDir/resources/main/"
}

static String getNextMajorMinecraftVersion(String currentVersion) {
    def version = currentVersion.substring(0, currentVersion.indexOf('.'))
    def majorVersion = currentVersion.substring(currentVersion.indexOf('.') + 1, currentVersion.indexOf('.', currentVersion.indexOf('.') + 1))
    def majorInt = Integer.valueOf(majorVersion)
    majorInt++
    majorVersion = majorInt.toString()
    return "${version}.${majorVersion}"
}

processResources {
    duplicatesStrategy(DuplicatesStrategy.FAIL)
    exclude('META-INF/mods.toml')
    configure { finalizedBy(replaceResources) }
}

classes.configure {
    dependsOn(replaceResources)
}

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

task publishCurseForge(type: net.darkhax.curseforgegradle.TaskPublishCurseForge) {
    dependsOn build

    apiToken = project.findProperty('curseforge_apikey') ?: System.getenv('CF_TOKEN')
    def mainFile = upload(619025, tasks.jarJar)
    mainFile.releaseType = 'release'
    mainFile.displayName = "${minecraftVersion}-${modVersion}"
    mainFile.changelog = file('CHANGELOG.md')
    mainFile.changelogType = 'markdown'
    mainFile.addModLoader('Forge')
    mainFile.addGameVersion(minecraftVersion)
}

modrinth {
    token = project.findProperty('modrinth_apikey') ?: System.getenv('MODRINTH_TOKEN')
    projectId = "wRRSWpd1"
    versionType = "release"
    versionName = "${minecraftVersion}-${modVersion}"
    uploadFile = tasks.jarJar
    gameVersions = [project.minecraftVersion]
    loaders = ["forge"]
    changelog = file('CHANGELOG.md').text
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            jarJar.component(it, tasks.jarJar)
        }
    }
    repositories {
        maven {
            name = "ManasCore"
            url "https://api-g.cloudsmith.io/maven/manasmods/manascore/"
            credentials {
                username = project.findProperty("cloudsmith_user") ?: System.getenv("CLOUDSMITH_USER")
                password = project.findProperty("cloudsmith_password") ?: System.getenv("CLOUDSMITH_PASSWORD")
            }
        }
    }
}