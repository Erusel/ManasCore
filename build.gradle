plugins {
    id 'dev.architectury.loom' version '1.7-SNAPSHOT' apply false
    id 'architectury-plugin' version '3.4-SNAPSHOT'
    id 'com.github.johnrengelman.shadow' version '8.1.1' apply false
    id "io.freefair.lombok" version "8.10" apply false
}

architectury {
    minecraft = project.minecraft_version
}

allprojects {
    group = rootProject.maven_group
    version = rootProject.mod_version
}

subprojects {
    apply plugin: 'dev.architectury.loom'
    apply plugin: 'architectury-plugin'
    apply plugin: 'maven-publish'

    if (!project.name.endsWith("common")) {
        apply plugin: 'com.github.johnrengelman.shadow'
    }

    architectury {
        if (!project.name.endsWith("common")) {
            platformSetupLoomIde()
        } else {
            common rootProject.enabled_platforms.split(',')
        }

        if (project.name.endsWith("fabric")) {
            fabric()
        } else if (project.name.endsWith("neoforge")) {
            neoForge()
        }
    }


    base {
        // Set up a suffixed format for the mod jar names, e.g. `example-fabric`.
        archivesName = "$rootProject.archives_name-$project.name"
    }

    if (!project.name.endsWith("common")) {
        configurations {
            common {
                canBeResolved = true
                canBeConsumed = false
            }
            compileClasspath.extendsFrom common
            runtimeClasspath.extendsFrom common

            if (project.name.endsWith("fabric")) {
                developmentFabric.extendsFrom common
            } else if (project.name.endsWith("neoforge")) {
                developmentNeoForge.extendsFrom common
            }

            shadowBundle {
                canBeResolved = true
                canBeConsumed = false
            }
        }
    }

    repositories {
        if (project.name.endsWith("neoforge")) {
            maven {
                name = 'NeoForged'
                url = 'https://maven.neoforged.net/releases'
            }
        }
    }

    dependencies {
        minecraft "net.minecraft:minecraft:$rootProject.minecraft_version"
        mappings loom.officialMojangMappings()

        var nameSeparatorIndex = project.path.lastIndexOf(':');
        var moduleName = project.path.substring(0, nameSeparatorIndex == -1 ? project.path.length() : nameSeparatorIndex)

        if (project.name.endsWith("common")) {
            modImplementation "net.fabricmc:fabric-loader:$rootProject.fabric_loader_version"
            modImplementation "dev.architectury:architectury:$rootProject.architectury_api_version"
        } else if (project.name.endsWith("fabric")) {
            modImplementation "net.fabricmc:fabric-loader:$rootProject.fabric_loader_version"
            modImplementation "net.fabricmc.fabric-api:fabric-api:$rootProject.fabric_api_version"
            modImplementation "dev.architectury:architectury-fabric:$rootProject.architectury_api_version"
            println("Adding fabric dependencies for $moduleName")
            common(project(path: "$moduleName:common", configuration: 'namedElements')) { transitive false }
            shadowBundle project(path: "$moduleName:common", configuration: 'transformProductionFabric')
        } else if (project.name.endsWith("neoforge")) {
            neoForge "net.neoforged:neoforge:$rootProject.neoforge_version"
            modImplementation "dev.architectury:architectury-neoforge:$rootProject.architectury_api_version"
            common(project(path: "$moduleName:common", configuration: 'namedElements')) { transitive false }
            shadowBundle project(path: "$moduleName:common", configuration: 'transformProductionNeoForge')
        }
    }

    java {
        // Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
        // if it is present.
        // If you remove this line, sources will not be generated.
        withSourcesJar()

        sourceCompatibility = JavaVersion.VERSION_21
        targetCompatibility = JavaVersion.VERSION_21
    }

    tasks.withType(JavaCompile).configureEach {
        it.options.release = 21
    }

    // Configure Maven publishing.
    publishing {
        publications {
            mavenJava(MavenPublication) {
                artifactId = base.archivesName.get()
                from components.java
            }
        }

        // See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
        repositories {
            // Add repositories to publish to here.
            // Notice: This block does NOT have the same function as the block in the top level.
            // The repositories here will be used for publishing your artifact, not for
            // retrieving dependencies.
        }
    }

    if (!project.name.endsWith("common")) {
        processResources {
            def placeholders = [
                    version: project.version
            ]

            placeholders.forEach { key, value ->
                inputs.property key, value
            }

            if (project.name.endsWith("neoforge")) {
                filesMatching('META-INF/neoforge.mods.toml') {
                    expand placeholders
                }
            } else if (project.name.endsWith("fabric")) {
                filesMatching('fabric.mod.json') {
                    expand placeholders
                }
            }
        }

        shadowJar {
            configurations = [project.configurations.shadowBundle]
            archiveClassifier = 'dev-shadow'
        }

        remapJar {
            input.set shadowJar.archiveFile
        }
    }
}
